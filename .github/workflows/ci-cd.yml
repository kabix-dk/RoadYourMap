name: CI/CD Pipeline

on:
  # Uruchamianie po push do main/master
  push:
    branches: [main, master]
  
  # Uruchamianie po pull request do main/master
  pull_request:
    branches: [main, master]
  
  # Uruchamianie manualne
  workflow_dispatch:

env:
  NODE_VERSION: '22.14.0'

jobs:
  # Job 1: Testy jednostkowe
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì• Install dependencies
        run: npm ci
        
      - name: üß™ Run unit tests with coverage
        run: npm run test:coverage
        
      - name: üìä Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: unit-tests-coverage
          fail_ci_if_error: false
          
      - name: üìã Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            !coverage/node_modules
          retention-days: 7

  # Job 2: Build produkcyjny
  build:
    name: üèóÔ∏è Production Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üì• Install dependencies
        run: npm ci
        
      - name: üèóÔ∏è Build for production
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            dist/
            !dist/node_modules
          retention-days: 7
          
      - name: üìä Check build size
        run: |
          echo "## Build Size Report üìä" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -o -name "*.css" | head -10 | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "| $file | $size |" >> $GITHUB_STEP_SUMMARY
          done

  # Job 3: Podsumowanie i raportowanie
  summary:
    name: üìã Pipeline Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, build]
    if: always()
    
    steps:
      - name: üìã Generate summary
        run: |
          echo "# üöÄ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Trigger Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          
      - name: ‚ùå Fail pipeline if critical jobs failed
        if: |
          needs.unit-tests.result == 'failure' ||
          needs.build.result == 'failure'
        run: |
          echo "‚ùå Pipeline failed due to critical job failures"
          exit 1 